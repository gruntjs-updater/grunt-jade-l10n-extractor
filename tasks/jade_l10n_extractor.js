/*
 * grunt-jade-l10n-extractor
 * https://github.com/vhpoet/grunt-jade-l10n-extractor
 *
 * Copyright (c) 2013 Vahe Hovhannisyan
 * Licensed under the MIT license.
 */

'use strict';

var jadeParser = require('jade').Parser;
var PO = require('node-po');

// After string extraction to update source po, run:
// $ tx set --auto-local -r project.messages '<lang>/messages.po' --source-lang en --source-file templates/messages.pot
//
// To update source to Transifex:
// $ tx push -s
//
// To download translations from Transifex:
// $ tx pull

module.exports = function(grunt)
{
  var extractor = function (filename, options) {
    var messages = [];

    var parser = new jadeParser(grunt.file.read(filename), filename);
    var doc = parser.parse();

    processBlock(doc);

    function processBlock(block)
    {
      block.nodes.forEach(function (node) {
        if(node.attrs) {
          var text = parseText(node);
          node.attrs.forEach(function (attr) {
            if (attr.name === "l10n") {
              messages.push({
                file: filename,
                line: node.line,
                msgid: ("string" === typeof attr.val)
                    ? (attr.escaped ? JSON.parse(attr.val) : attr.val)
                  // Replace &#32; with space and trim
                    : text.replace(/&#32;/g,' ').replace(/^\s+|\s+$/gm, ''),
                msgstr: text.replace(/&#32;/g,' ').replace(/^\s+|\s+$/gm, '')
              });
            }
            else {
              var translatableTag = /l10n-([-a-zA-Z0-9]*)/g.exec(attr.name);

              if (translatableTag && translatableTag[1] !== 'inc') {
                messages.push({
                  file: filename,
                  line: node.line,
                  msgid: attr.escaped ? JSON.parse(attr.val) : attr.val,
                  msgstr: attr.escaped ? JSON.parse(attr.val) : attr.val
                });
              }
            }
          });
        }

        node.block && processBlock(node.block);
      });
    }

    function parseText(node)
    {
      var textPieces = [], counter = 1;

      node.block.nodes.forEach(function (node) {
        var nodeText = '';
        if (node.name) {
          var alias = String(counter++), content = '';
          node.attrs && node.attrs.forEach(function (attr) {
            if (attr.name === "l10n-inc") {
              content = ":"+parseText(node);
            }
          });

          if (node.block.nodes[0] && node.block.nodes[0].val
              && 0 === node.block.nodes[0].val.indexOf(" ")) {
            nodeText += " ";
          }

          nodeText += "{{";
          nodeText += alias;
          nodeText += content;
          nodeText += "}}";
          textPieces.push(nodeText);
        } else if ("string" === typeof node.val) {
          textPieces.push(node.val);
        }
      });

      return escapeString(textPieces.join(''));
    }

    return messages;
  };

  grunt.registerMultiTask('jade_l10n_extractor', 'Extract l10n strings from jade files.', function() {
    var options = this.options({
      punctuation: '.',
      separator: ', '
    });

    var messages = [];

    // Iterate over all specified file groups.
    this.files.forEach(function(f) {
      f.src.forEach(function (src) {
        messages = messages.concat(extractor(src, options));
      });

      var contents = "# Generated by grunt-jade-l10n-extractor\n\n";

      var po = new PO();
      po.headers["MIME-Version"] = "1.0";
      po.headers["Content-Type"] = "text/plain; charset=UTF-8";
      po.headers["Content-Transfer-Encoding"] = "8bit";

      var msgIndex = {};
      var hasCollisions = false;
      messages = messages.filter(function (msg) {
        var poItem;
        if ("object" === typeof msgIndex[msg.msgid]) {
          poItem = msgIndex[msg.msgid];
          if (poItem.msgstr !== msg.msgstr) {
            hasCollisions = true;
            grunt.log.error();
            grunt.log.error("Two messages with the same ID, but different strings:");
            grunt.log.error(": "+poItem.file+":"+poItem.line);
            grunt.log.error(": "+msg.file+":"+msg.line);
            grunt.log.error(": both have ID '"+msg.msgid+"'");
          } else {
            poItem.references.push(msg.file+":"+msg.line);
          }
          return false;
        } else {
          poItem = new PO.Item();
          poItem.msgid = msg.msgid;
          poItem.msgstr = msg.msgstr;
          poItem.references = [msg.file + ":" + msg.line];
          msgIndex[msg.msgid] = poItem;
          po.items.push(poItem);
          return true;
        }
      });

      if (hasCollisions) {
        grunt.fail.warn("Duplicate ID.");
        return false;
      }

      contents += po.toString();

      grunt.file.write(f.dest, contents);

      var count = messages.length;
      grunt.log.ok("Extracted " + count + " messages from " + f.src.length + " files.");
      grunt.log.ok("POT file " + f.dest + " written.");
    });
  });

  function escapeString(str) {
    // http://kevin.vanzonneveld.net
    // +   original by: Kevin van Zonneveld (http://kevin.vanzonneveld.net)
    // +   improved by: Ates Goral (http://magnetiq.com)
    // +   improved by: marrtins
    // +   improved by: Nate
    // +   improved by: Onno Marsman
    // +   input by: Denny Wardhana
    // +   improved by: Brett Zamir (http://brett-zamir.me)
    // +   improved by: Oskar Larsson HÃ¶gfeldt (http://oskar-lh.name/)
    // *     example 1: addslashes("kevin's birthday");
    // *     returns 1: 'kevin\'s birthday'
    return (str + '').replace(/[\\"]/g, '\\$&').replace(/\u0000/g, '\\0');
  }

};
